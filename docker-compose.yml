services:
  api: &app_base
    image: '${API_IMAGE? not found}:${API_IMAGE_TAG-latest}'
    networks:
      - base
    restart: always
    build:
      context: ./
      dockerfile: Dockerfile.dev
    # depends_on:
    #   prestart:
    #     condition: service_completed_successfully
    #   db:
    #     condition: service_completed_successfully
    #     # restart: true
    environment:
      - OBSERVABILITY=true # TODO: should be false
    env_file:
      - ./.env
  worker:
    networks:
      - base
    <<: *app_base
    volumes:
      - ./app:/app/app:ro
    command: dramatiq app.main --processes 4 --threads 8

  prestart:
    networks:
      - base
    image: '${API_IMAGE? not found}:${API_IMAGE_TAG-lattest}'
    build:
      context: ./
      dockerfile: Dockerfile.dev
    env_file:
      - ./.env
    command: pwd
    # command: bash scripts/prestart.sh

  redis:
    networks:
      - base
    image: redis:7

  db:
    networks:
      - base
    image: postgres:12
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT-5432}:${POSTGRES_PORT-5432}"
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

networks:
  base:
    driver: bridge

volumes:
  postgres_data:
